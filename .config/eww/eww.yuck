;; vars
(defpoll clock 
  :interval "1s" 
  "date +\"  %m/%d  %H:%M:%S\""
)
(deflisten current_title 
  :initial "..." 
  "bash ~/.config/eww/scripts/get-window-title"
)
(deflisten workspaces 
  :initial "[{\"name\":\"~\",\"active\":true}]" 
  "bash ~/.config/eww/scripts/get-workspaces"
)

(defvar show-mem-avali true)
(defvar show-sysinfo true)

(defvar output-sinks "[{\"id\":123,\"desc\":\"122\"}]")
(defvar output-selector false)
(defvar output-vol "?%")

;; widgets

(defwidget workspace []
  (box
    :orientation "horizontal"
    :halign "center"

    (eventbox
      :onscroll "bash ${EWW_CONFIG_DIR}/scripts/change-workspace {}"
      
      (box
        :space-evenly false
        :spacing 5
        (for ws in workspaces
          (eventbox
            :onclick "hyprctl dispatch workspace name:${ws.name}"
            :class "${ws.active ? 'selected':'option'}"
            ;; :width {strlength(ws.name) > 3 ? strlength(ws.name) : 5}
            :width 1

            
            "${ws.active ? '[${ws.name}]': '${ws.name}'}"
            
          )
        )
      )
    )
  )
)

(defwidget soundsystem []
  (box
    :orientation "horizontal"
    :halign "center"
    :class "soundsystem"
    (box 
      :visible output-selector
      :spacing 10

      (for sink in output-sinks
        (eventbox
          :class "${sink.stat == 'RUNNING' ? 'selected':'option'}"
          ;; :onclick "pactl set-default-sink ${sink.id} ; bash ${EWW_CONFIG_DIR}/scripts/sink-selector"
          :onclick 'pactl set-default-sink ${sink.id} ; ${EWW_CMD} update output-sinks="$(pactl -f json list sinks | jq \'map({id:.index,desc:.description,stat:.state})\')"'
          (label
            :wrap true
            :text "${sink.desc} ${sink.stat == 'SUSPENDED' ? '':'[current]'}"
          )
        )
      )
    )

    (eventbox
      :onscroll 'bash ${EWW_CONFIG_DIR}/scripts/vol {} ; ${EWW_CMD} update output-vol="$(pamixer --get-volume-human)" '
      :onclick "${output-selector?'':'pamixer -t ; ${EWW_CMD} update output-vol="$(pamixer --get-volume-human)"'}"
      :onrightclick 
      '${EWW_CMD} update output-selector=${!output-selector} ;\
        ${EWW_CMD} update output-sinks="$(pactl -f json list sinks | jq \'map({id:.index,desc:.description,stat:.state})\')"'
      (label 
        :text "${output-selector?"Click to select an output":" ${output-vol}"}"
      )
    )
  )
)

(defwidget battery [battery status ]
  (box 
    :class "battery" 
    :space-evenly false 

    (label 
      :text "${
          battery < 10 ? "" :
          battery < 20 ? "" :
          battery < 30 ? "" :
          battery < 40 ? "" :
          battery < 50 ? "" :
          battery < 60 ? "" : 
          battery < 70 ? "" :
          battery < 80 ? "" :
          battery < 90 ? "" : 
                         ""
    }${status == "Charging" ? "" : ""} ${battery}%"
    )
  )
)

(defwidget title []
  (box 
    :orientation "horizontal"
    :halign "center"
    :class "title"
  
    (label
     :text current_title
      :limit-width 50
    )
  )
)

(defwidget clock []
  (box 
    :orientation "horizontal"
    :halign "center"
    :class "clock"

    clock
  )
)

(defwidget icon []
  (label
    :text " "
  )
)

;; TODO: should impl a popup widgets that shows sysinfo
(defwidget sysinfo []
  (box
    :orientation "horizontal"
    :halign "center"
    :space-evenly false
    (box
      :class "sysinfo"
      :visible show-sysinfo
      (mem)
      (cpu)
    )
    (eventbox
      :onrightclick "hyprctl dispatch exec [float]kitty btop"
      :onclick "${EWW_CMD} update show-sysinfo=${ !show-sysinfo }"
      (label
        :text "${show-sysinfo?' ':' '}"
      )
    )
  )
)


(defwidget mem []
  (box
    :orientation "horizontal"
    :halign "center"
    :class "mem sysinfo"
    (eventbox
      :onclick "${EWW_CMD} update show-mem-avali=${!show-mem-avali}"
      "${ show-mem-avali  ?" ${round(EWW_RAM.available_mem/(1024*1024*1024),1)}G" : " ${round(EWW_RAM.used_mem/(1024*1024*1024),1)}G"  }"
    )
  )
)


(defwidget cpu []
  (box 
    :orientation "horizontal"
    :halign "center"
    :class "cpu sysinfo"
  
    " ${round(EWW_CPU.avg,0)}%"
  )
)



;; layouts

(defwidget left []
	(box 
    :orientation "h" 
		:space-evenly false  
    :halign "start"
		:class "left_modules"
    :spacing 10

  (icon)
  (workspace)
))


(defwidget center []
	(box 
    :orientation "h" 
		:space-evenly false  
    :halign "center"
		:class "center_modules"
    :spacing 10

  (title)
))

(defwidget right []
	(box
    :orientation "h" 
		:space-evenly false  
    :halign "end"
		:class "right_modules"
    :spacing 10

  (soundsystem)
  (sysinfo)
  (battery 
    :status {EWW_BATTERY.BAT0.status}
    :battery {EWW_BATTERY.BAT0.capacity}
    )
  (clock)

))


(defwidget bar []
  (box 
    :orientation "h"
    :hexpand false
    :class "mainbar"
  (left)
    (center)
  (right)
))


(defwindow mainbar 
  :monitor 0
  :geometry (geometry 
    :x "0%"
    :y "5px"
    :width "99%"
    :height "30px"
    :anchor "top center")
  :stacking "bg"
  :exclusive true
  :focusable false
  (bar)
)

